$ sudo apt update
$ sudo apt install ansible
$ sudo apt install virtualbox
$ sudo atp update
$ curl -O https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.deb
$ sudo apt install ./vagrant_2.2.14_x86_64.deb
$ vagrant --version

$ mkdir ansible-book && cd ansible-book
$ vagrant init ubuntu/trusty64
#  Open the Vagrantfile in your editor and add the following to the end of the file, just
before the word end.  
$ vi Vagrantfile
 config.vm.box = "ubuntu/trusty64"
 config.vm.network "private_network", type:"dhcp"

# This tells Vagrant that it needs to create a virtual machine with 1024mb of memory.
# We also need to tell Vagrant that we want to run Ansible on this virtual machine by
adding some instructions to the Vagrantfile, just after the configuration you just added.
Right at the bottom and before the word end, add the following contents to the file:
config.vm.provider "virtualbox" do |vb|
 vb.memory = "1024"
 vb.gui = true
end

# This tells Vagrant to use Ansible to run the playbook named playbook.yml inside a
folder named provisioning in the current directory. 
config.vm.provision "ansible" do |ansible|
 ansible.playbook = "provisioning/playbook.yml"
end 

$ vagrant up
$ vagrant status
$ vagrant destroy
#Enable nested VM
$VBoxManage modifyvm ansible-book_default_1607797511858_37122 --nested-hw-virt on

#Playbook.yml
$ vi ./provisioning/playbook.yml

---
- hosts: all
  become: true
  tasks:
    - name: Make sure that we can connect to the machine
      ping:
    - name: Install PHP
      apt: name=php5-cli state=present update_cache=yes
    - name: Install nginx
      apt: name=nginx state=present
    - name: Install mySQL
      apt: name=mysql-server-5.6 state=present

# consolidated playbook.yml
---
- hosts: all
  become: true
  tasks:
    - name: Install required packages
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - php5-cli
        - nginx
        - mysql-server-5.6

$ vagrant provision

$ vagrant ssh
$ which php
$ which nginx
$ which mysqld

# using ansible-playbook command
vi inventory_file
172.28.128.5 ansible_user=vagrant ansible_ssh_private_key_file=.vagrant/machines/default/virtualbox/private_key
## more samples
# alpha.example.com ansible_user=bob ansible_port=50022
# bravo.example.com ansible_user=mary ansible_ssh_private_key_file=/path/to/mary.key
# frontend.example.com ansible_port=50022
# yellow.example.com ansible_host=192.168.33.10
# The users below are not the users that were used to log into the machine (ansible_user is). Those are the suers that you will change to when using become :true. 
# alpha.example.com ansible_become_user=automation
# bravo.example.com ansible_become_user=automation
# frontend.example.com ansible_become_user=ansible
# yellow.example.com 

# An Example inventory

[web_centos5]
fe1.example.com ansible_user=michael ansible_ssh_private_key_file=michael.key
fe2.example.com ansible_user=michael ansible_ssh_private_key_file=michael.key

[web_centos6]
web[1:3].example.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/auto.key

[database_centos6]
db.example.com ansible_user=michael ansible_ssh_private_key_file=/path/to/db.key

[loadbalancer_centos6]
lb.example.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/lb.key 

[web:children]
web_centos5
web_centos6

[database:children]
database_centos6

[loadbalancer:children]
loadbalancer_centos6 

$ ansible-playbook -i inventory_file provisioning/playbook.yml

# checking ubuntu version
$ vagrant ssh
$ lsb_release -a

# Search package info 
$ vagrant ssh
$ apt search mysql | grep mysql
$ apt search php | grep php

# run do-release-upgrade upgrade to 16.04.7
# playbook.yml
---
- hosts: all
  become: true
  tasks:
    - name: Make sure we can connect
      ping:
    # PHP
    - name: Run apt update
      apt: update_cache=yes
    - name: Add the ondrej PHP PPA
      apt_repository: repo='ppa:ondrej/php'
    - name: update the apt cache
      apt: update_cache=yes cache_valid_time=3600
    - name: install php
      apt: name={{item}} state=present
      with_items:
              - php
              - php-fpm
              - php-mysql
              - php-xml
    - name: remove apache2
      apt: name=apach2 state=absent
    # MySQL
    - name: install MySQL
      apt: name={{item}} state=present
      with_items:
              - mysql-server-5.7
              - python-mysqldb 
    - name: Generate new root password
      command: openssl rand -hex 7
      register: mysql_new_root_pass 
      
    - name: Output new root password
      debug: msg="New root password is {{mysql_new_root_pass.stdout}}"     
      
    - name: Create my.cnf
      template: src=templates/mysql/my.cnf dest=/root/.my.cnf   

    - name: Generate new root password
      command: openssl rand -hex 7 creates=/root/.my.cnf
      register: mysql_new_root_pass
      
    - name: Generate new root password
      command: openssl rand -hex 7 creates=/root/.my.cnf
      register: mysql_new_root_pass
    # If /root/.my.cnf doesn't exist and the command is run
    - debug: msg="New root password is {{ mysql_new_root_pass.stdout }}"
      when: mysql_new_root_pass.changed
    # If /root/.my.cnf exists and the command is not run
    - debug: msg="No change to root password"
      when: not mysql_new_root_pass.changed 



